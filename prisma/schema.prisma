generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // คุณสามารถเปลี่ยนตามชนิดของฐานข้อมูลที่ใช้งาน
  url      = env("DATABASE_URL")
}

model Vendor {
  id        Int            @id @default(autoincrement())
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")
  users     VendorUser[]
  banners   VendorBanner[]
  carPosts  CarPost[]

  // @comment where is table name mapping and column
}

model VendorBanner {
  id        Int      @id @default(autoincrement())
  vendorId  Int      @map("vendor_id") // Foreign key to Vendor
  imagePath String?  @map("image_path") // Path to the banner image
  imageName String?  @map("image_name") // Image file name
  createdAt DateTime @default(now()) @map("created_at")

  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model VendorUser {
  id                 Int       @id @default(autoincrement())
  uid                String?   @unique @default(uuid()) @map("uid")
  vendorId           Int? // เปลี่ยนเป็น nullable
  username           String? // อนุญาตให้เป็น null ได้
  email              String? // อนุญาตให้เป็น null ได้
  isEmailVerified    Boolean?  @default(false) @map("is_email_verified")
  mobileNumber       String?   @map("mobile_number") // เบอร์โทรศัพท์มือถือ
  lastLogin          DateTime? @map("last_login")
  nickName           String?   @map(" nick_name")
  firstName          String?   @map("first_name")
  lastName           String?   @map("last_name")
  profilePicturePath String?   @map("profile_picture_path")
  profilePictureName String?   @map("profile_picture_name")

  isEnable  Boolean   @default(true) @map("(is_enable)")
  password  String? // อนุญาตให้เป็น null ได้ในกรณีที่เป็น OAuth
  roleId    Int?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  vendor    Vendor?   @relation(fields: [vendorId], references: [id])
  role      Role?     @relation(fields: [roleId], references: [id])
}

//backoffice

model Customer {
  id                 Int           @id @default(autoincrement())
  uid                String?       @unique @default(uuid()) @map("uid")
  mobileNumber       String?       @map("mobile_number")
  lastLogin          DateTime?     @map("last_login")
  nickName           String?       @map(" nick_name")
  firstName          String?       @map("first_name")
  lastName           String?       @map("last_name")
  username           String?
  email              String?
  password           String?
  isEnable           Boolean       @default(true) @map("(is_enable)")
  profilePicturePath String?       @map("profile_picture_path")
  profilePictureName String?       @map("profile_picture_name")
  isOauth            Boolean       @default(false) @map("is_oauth")
  oauthType          String?       @map("oauth_type")
  oauthUserData      Json?         @map("oauth_user_data")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")
  deletedAt          DateTime?     @map("deleted_at")
  carViews           UserCarView[]
  reviews            Review[] // เพิ่ม relation field นี้
}

model Review {
  id         Int      @id @default(autoincrement())
  customerId Int
  carId      Int // เพิ่ม carId field เพื่อเชื่อมโยงกับ Car
  customer   Customer @relation(fields: [customerId], references: [id])
  car        Car      @relation(fields: [carId], references: [id]) // เพิ่มความสัมพันธ์กับ Car
  rating     Int // คะแนน 1-5
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  createdAt   DateTime         @default(now()) @map("created_at")
  users       VendorUser[]
  permissions RolePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime         @default(now()) @map("created_at")
  permissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now()) @map("created_at")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model Car {
  id             Int       @id @default(autoincrement())
  categoryId     Int
  brandId        Int
  modelId        Int
  year           Int
  specifications Json?
  basePrice      Decimal   @db.Decimal(12, 2)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  carViewCount   Int?
  posts          CarPost[]
  Category       Category  @relation(fields: [categoryId], references: [id])
  Brand          Brand     @relation(fields: [brandId], references: [id])
  Model          Model     @relation(fields: [modelId], references: [id])
  reviews        Review[] // เพิ่ม relation field นี้
}

model CarPost {
  id                    Int       @id @default(autoincrement())
  uid                   String?   @unique @default(uuid()) @map("uid")
  carId                 Int
  vendorId              Int
  price                 Decimal   @db.Decimal(12, 2)
  year                  Int
  mileage               Int // New field for mileage (เลขไมล์)
  overrideSpecification Json?
  isDiscount            Boolean
  preDiscountPrice      Decimal   @db.Decimal(12, 2)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt             DateTime? @map("deleted_at")
  viewCount             Int?      @map("view_count")
  car                   Car       @relation(fields: [carId], references: [id])

  vendor      Vendor        @relation(fields: [vendorId], references: [id])
  pictures    CarPicture[]
  UserCarView UserCarView[]
}

model Category {
  id        Int      @id @default(autoincrement())
  logoName  String?  @map("logo_name")
  logoPath  String?  @map("logo_path")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  cars      Car[]
}

model Brand {
  id              Int     @id @default(autoincrement())
  logoName        String? @map("logo_name") // ชื่อไฟล์โลโก้หลัก
  logoPath        String? @map("logo_path") // ที่อยู่ไฟล์โลโก้หลัก
  logoLightBgName String? @map("logo_light_bg_name") // ชื่อไฟล์โลโก้สำหรับพื้นหลังขาว
  logoLightBgPath String? @map("logo_light_bg_path") // ที่อยู่ไฟล์โลโก้สำหรับพื้นหลังขาว

  name      String
  createdAt DateTime @default(now()) @map("created_at")
  cars      Car[]
  Model     Model[]
}

model Model {
  id        Int      @id @default(autoincrement())
  name      String
  brandId   Int
  createdAt DateTime @default(now()) @map("created_at")
  cars      Car[]
  brand     Brand    @relation(fields: [brandId], references: [id])
}

model CarPicture {
  id          Int      @id @default(autoincrement())
  carId       Int
  type        String
  pictureName String   @map("picture_name")
  picturePath String   @map("picture_path")
  createdAt   DateTime @default(now()) @map("created_at")
  car         CarPost  @relation(fields: [carId], references: [id])
}

model UserCarView {
  id          Int      @id @default(autoincrement())
  customerUid String
  carId       Int
  createdAt   DateTime @default(now()) @map("created_at")
  customer    Customer @relation(fields: [customerUid], references: [uid])
  car         CarPost  @relation(fields: [carId], references: [id])
}
