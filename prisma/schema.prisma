generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // คุณสามารถเปลี่ยนตามชนิดของฐานข้อมูลที่ใช้งาน
  url      = env("DATABASE_URL")
}

model Vendor {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  vendorSubscription VendorSubscription?
  users              VendorUser[]
  banners            VendorBanner[]
  carPosts           CarPost[]

  @@map("vendors")
}

model VendorBanner {
  id        Int      @id @default(autoincrement())
  vendorId  Int      @map("vendor_id") // Foreign key to Vendor
  imagePath String?  @map("image_path") // Path to the banner image
  imageName String?  @map("image_name") // Image file name
  createdAt DateTime @default(now()) @map("created_at")

  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@map("vendor_banners")
}

model VendorUser {
  id                 Int       @id @default(autoincrement())
  uid                String?   @unique @default(uuid()) @map("uid")
  vendorId           Int?      @map("vendor_id")
  username           String? // อนุญาตให้เป็น null ได้
  email              String? // อนุญาตให้เป็น null ได้
  isEmailVerified    Boolean?  @default(false) @map("is_email_verified")
  mobileNumber       String?   @map("mobile_number") // เบอร์โทรศัพท์มือถือ
  lastLogin          DateTime? @map("last_login")
  nickName           String?   @map("nick_name")
  firstName          String?   @map("first_name")
  lastName           String?   @map("last_name")
  profilePicturePath String?   @map("profile_picture_path")
  profilePictureName String?   @map("profile_picture_name")
  isEnable           Boolean   @default(true) @map("is_enable")
  password           String? // อนุญาตให้เป็น null ได้ในกรณีที่เป็น OAuth
  roleId             Int?      @map("role_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")
  vendor             Vendor?   @relation(fields: [vendorId], references: [id])
  role               Role?     @relation(fields: [roleId], references: [id])

  @@map("vendor_users")
}

model CustomerFavorite {
  id          Int      @id @default(autoincrement())
  customerUid String   @map("customer_uid") // Foreign key to Customer
  postId      Int      @map("post_id") // Foreign key to Car
  createdAt   DateTime @default(now()) @map("created_at")
  customer    Customer @relation(fields: [customerUid], references: [uid])
  post        CarPost  @relation(fields: [postId], references: [id])

  @@unique([customerUid, postId]) // Ensure each customer can favorite a car only once
  @@map("customer_favorites")
}

model Customer {
  id                 Int                @id @default(autoincrement())
  uid                String             @unique @default(uuid()) @map("uid")
  mobileNumber       String?            @map("mobile_number")
  lastLogin          DateTime?          @map("last_login")
  nickName           String?            @map(" nick_name")
  firstName          String?            @map("first_name")
  lastName           String?            @map("last_name")
  username           String?
  email              String?
  password           String?
  isEnable           Boolean            @default(true) @map("is_enable")
  profilePicturePath String?            @map("profile_picture_path")
  profilePictureName String?            @map("profile_picture_name")
  isOauth            Boolean            @default(false) @map("is_oauth")
  oauthType          String?            @map("oauth_type")
  oauthUserData      Json?              @map("oauth_user_data")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")
  deletedAt          DateTime?          @map("deleted_at")
  carViews           UserCarView[]
  reviews            Review[] // เพิ่ม relation field นี้
  favorites          CustomerFavorite[] // New relation field

  @@map("customers")
}

model Review {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("customer_id")
  carId      Int      @map("car_id")
  customer   Customer @relation(fields: [customerId], references: [id])
  car        CarPost  @relation(fields: [carId], references: [id]) // ความสัมพันธ์กับ CarPost
  rating     Int // คะแนน 1-5
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  createdAt   DateTime         @default(now()) @map("created_at")
  users       VendorUser[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime         @default(now()) @map("created_at")
  permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}

model Car {
  id             Int       @id @default(autoincrement())
  categoryId     Int       @map("category_id")
  brandId        Int       @map("brand_id")
  modelId        Int       @map("model_id")
  year           Int
  specifications Json?
  basePrice      Decimal   @map("base_price") @db.Decimal(12, 2)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  carViewCount   Int?      @map("car_view_count")
  posts          CarPost[]
  Category       Category  @relation(fields: [categoryId], references: [id])
  Brand          Brand     @relation(fields: [brandId], references: [id])
  Model          Model     @relation(fields: [modelId], references: [id])

  @@map("cars")
}

model CarPost {
  id                    Int                @id @default(autoincrement())
  uid                   String?            @unique @default(uuid()) @map("uid")
  carId                 Int                @map("car_id")
  vendorId              Int                @map("vendor_id")
  price                 Decimal            @db.Decimal(12, 2)
  year                  Int
  mileage               Int
  overrideSpecification Json?              @map("override_specification")
  isDiscount            Boolean            @map("is_discount")
  preDiscountPrice      Decimal            @map("pre_discount_price") @db.Decimal(12, 2)
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @default(now()) @updatedAt @map("updated_at")
  deletedAt             DateTime?          @map("deleted_at")
  viewCount             Int?               @default(0) @map("view_count")
  favoriteCount         Int?               @default(0) @map("favorite_count")
  car                   Car                @relation(fields: [carId], references: [id])
  reviews               Review[]
  vendor                Vendor             @relation(fields: [vendorId], references: [id])
  favoritedBy           CustomerFavorite[] // New relation field
  pictures              CarPicture[]
  UserCarView           UserCarView[]

  @@map("car_posts")
}

model Category {
  id        Int      @id @default(autoincrement())
  logoName  String?  @map("logo_name")
  logoPath  String?  @map("logo_path")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  cars      Car[]

  @@map("categories")
}

model Brand {
  id              Int      @id @default(autoincrement())
  logoName        String?  @map("logo_name") // ชื่อไฟล์โลโก้หลัก
  logoPath        String?  @map("logo_path") // ที่อยู่ไฟล์โลโก้หลัก
  logoLightBgName String?  @map("logo_light_bg_name") // ชื่อไฟล์โลโก้สำหรับพื้นหลังขาว
  logoLightBgPath String?  @map("logo_light_bg_path") // ที่อยู่ไฟล์โลโก้สำหรับพื้นหลังขาว
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  cars            Car[]
  Model           Model[]

  @@map("brands")
}

model Model {
  id        Int      @id @default(autoincrement())
  name      String
  brandId   Int      @map("brand_id")
  createdAt DateTime @default(now()) @map("created_at")
  cars      Car[]
  brand     Brand    @relation(fields: [brandId], references: [id])

  @@map("models")
}

model CarPicture {
  id          Int      @id @default(autoincrement())
  carId       Int      @map("car_id")
  type        String
  pictureName String   @map("picture_name")
  picturePath String   @map("picture_path")
  createdAt   DateTime @default(now()) @map("created_at")
  car         CarPost  @relation(fields: [carId], references: [id])

  @@map("car_pictures")
}

model UserCarView {
  id          Int      @id @default(autoincrement())
  customerUid String   @map("customer_uid")
  carId       Int      @map("car_id")
  createdAt   DateTime @default(now()) @map("created_at")
  customer    Customer @relation(fields: [customerUid], references: [uid])
  car         CarPost  @relation(fields: [carId], references: [id])

  @@map("user_car_views")
}

model SubscriptionPackage {
  id          Int     @id @default(autoincrement())
  packageName String  @map("package_name")
  carPostSlot Int     @map("car_post_slot")
  price       Decimal @db.Decimal(12, 2)
  durationInDay Int  @map("duration_in_day")

  vendorSubscriptions VendorSubscription[] // ความสัมพันธ์แบบ One-to-Many

  @@map("subscription_packages")
}

model VendorSubscription {
  id             Int      @id @default(autoincrement())
  packageId      Int      @map("package_id")
  vendorId       Int      @unique @map("vendor_id") //1 to 1 use unique
  isActive       Boolean  @map("is_active")
  amountPaid     Decimal  @db.Decimal(12, 2) @map("amount_paid")
  packageStartAt DateTime @map("package_start_at")
  packageEndAt   DateTime @map("package_end_at")
  paidAt         DateTime @map("paid_at")
  note          String?
  // ความสัมพันธ์
  subscriptionPackage SubscriptionPackage @relation(fields: [packageId], references: [id])
  vendor              Vendor              @relation(fields: [vendorId], references: [id])

  @@map("vendor_subscription")
}

